import React from 'react'
import axios from 'axios'
import { useEffect, useState, useMemo, useCallback } from 'react'
import { Autocomplete, TextField } from '@mui/material'
import Stack from '@mui/material/Stack';

const SearchCoin = () => {

    const [dataFromSearch, setDataFromSearch] = useState<any[]>([]);
    const [value, setValue] = useState<any>('');
    const [inputValue, setInputValue] = useState('bitcoin');
    const [mapping, setMapping] = useState<any>({})
    
    //const [url, setUrl] = useState<string>('');

    // useEffect(() =>{
    //   setUrl(`https://api.coingecko.com/api/v3/search?query=${value}`)
    // },[setInputValue])

  


    // useEffect(() => {
    //   axios.get(`https://api.coingecko.com/api/v3/search?query=bitcoin`)
    //   .then((rest) => rest.data)
    //   .then((data) => data.coins)
    //   .then((coins) => coins.map((coiny:any) => coiny.name ))

    //   .then((name) => setDataFromSearch(name))
    // },[])

    const test = useCallback((newinputValue:any) =>{
      setInputValue(newinputValue)
      axios.get(`https://api.coingecko.com/api/v3/search?query=${inputValue}`)
        .then((rest) => rest.data)
        .then((data) =>  setDataFromSearch(data.coins))
      },[])
      
     

     useEffect(() => {
      if( Object.keys(mapping).length===0){
      let tempMapping = {}
      dataFromSearch.map((e:any) => {
      tempMapping = ({...tempMapping, [e.name]: e.id})
      })
     console.log(tempMapping)
      setMapping(tempMapping);
      }
    }),[dataFromSearch]
// console.log(dataFromSearch)
// console.log(mapping)
// setMapping(tempMapping)
// return data.map((data:any)=> data.id)

  return (
    <div>
      {/* <Autocomplete
        value={value}
        onChange={(event: any, newValue: any | null) => {
          const id:any = newValue
         setValue(newValue);
          window.location.href = `http://localhost:5173/${mapping[id]}` /// UseNavigate
        }}
        inputValue={inputValue}
        onInputChange={(event, newInputValue) => {
          setInputValue(newInputValue);
        }}
        id="controllable-states-demo"
        options={Object.keys(mapping)}
        sx={{ width: 300 }}
        renderInput={(params) => <TextField {...params} label="Controllable" />}
        /> */}


    
      <Autocomplete
      value={value}
      onChange={(event: any, newValue: any | null) => {
        const id:any = newValue
       setValue(newValue);
      }}
      onInputChange={(event, newInputValue) => {
        test(newInputValue)
      }}
        freeSolo
        id="free-solo-2-demo"
        disableClearable
        options={Object.keys(mapping)}
        renderInput={(params) => (
          <TextField
            {...params}
            label="Search input"
            InputProps={{
              ...params.InputProps,
              type: 'search',
            }}
          />
        )}
      />

    </div>
  )
}

export default SearchCoin
