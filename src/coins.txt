
import React from 'react'
import axios from 'axios'
import { useEffect, useState, useMemo } from 'react'
import HistoryChart from '../HistoryChart/HistoryChart';
import { Pagination, Stack, Avatar, Table,TableBody,TableCell,TableContainer,TableHead,TableRow,Paper, InputLabel, MenuItem, Select, FormControl, Autocomplete, TextField } from '@mui/material'
import './Coins.css'
import {Link} from 'react-router-dom'


const Coins = () => {

  // fetch do custom hook 
// zmienic nazwy 

    // [coinData] = useCoinData()
    const [data, setData] = useState<any[]>([]);
    const dataList:number = 12300 /// 
    const [page, setPage] = useState<number>(1);
    const [perPage, setPerPage] = useState<any>(10);
    const [currency, setCurrency] = useState<string>('USD');
    const [url, setUrl] = useState<string>(`https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=10&page=1&sparkline=false`)
    

    // Search ---->
      const [dataLists, setDataLists] = useState<any[]>([]);
      const [value, setValue] = useState<string | null>('');
      const [inputValue, setInputValue] = useState('');
      const [mapping, setMapping] = useState<any>({})

      const urlSearch:string = `https://api.coingecko.com/api/v3/coins/list?include_platform=false`/// zmmienic to na inne szukanie z uzyciem curr value 

      useEffect(() => {
        axios.get(urlSearch)
        .then((rest) => rest.data)
        .then((data) =>{ setDataLists(data) })
  
        //.then((name) => setDataLists(name))
      },[urlSearch, setDataLists])
    // <------

console.log(dataLists)

    useEffect(() => {
      if( Object.keys(mapping).length===0){
      let tempMapping = {}
      data.map((e:any) => {
      tempMapping = ({...tempMapping, [e.name]: e.id})
      })
     console.log(tempMapping)
      setMapping(tempMapping);
      }
    }),[setMapping]

console.log(mapping)
// setMapping(tempMapping)
// return data.map((data:any)=> data.id)


    useEffect(() =>{
      setUrl(`https://api.coingecko.com/api/v3/coins/markets?vs_currency=${currency}&order=market_cap_desc&per_page=${perPage}&page=${page}&sparkline=false`)
    },[currency,perPage,page])

    useEffect(() => {
        axios.get(url)
        .then((rest) => rest.data)
        .then((data) => setData(data))
      },[url, setData])

  

      const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {
        setPage(value);
      };
   
 
  return (
    <div>

<Autocomplete
        value={value}
        onChange={(event: any, newValue: any | null) => {
          const id:any = newValue || ''
          setValue(mapping[id]);
          window.location.href = `http://localhost:5173/${mapping[id]}` /// UseNavigate 
        }}
        inputValue={inputValue}
        onInputChange={(event, newInputValue) => {
          setInputValue(newInputValue);
        }}
        id="controllable-states-demo"
        options={Object.keys(mapping)}
        sx={{ width: 300 }}
        renderInput={(params) => <TextField {...params} label="Controllable" />}
        />

       <InputLabel id="demo-simple-select-label">Choose currency</InputLabel>
         <Select
           labelId="demo-simple-select-label"
           id="demo-simple-select"
           label="Choose currency"
           value={currency}
           onChange={e=> setCurrency(e.target.value)}
         >
           <MenuItem value='USD'>USD</MenuItem>
           <MenuItem value='PLN'>PLN</MenuItem>
           <MenuItem value='BTC'>BTC</MenuItem>
           <MenuItem value='EUR'>EUR</MenuItem>
           <MenuItem value='GBP'>GBP</MenuItem>
         </Select>

        <TableContainer component={Paper}>
        <Table sx={{ minWidth: 650 }} size='small' aria-label="simple table">
        <TableHead>
          <TableRow>
            <TableCell>Asset</TableCell>
            <TableCell align="right">Name</TableCell>
            <TableCell align="right">Total Volume</TableCell>
            <TableCell align="right">Price {`(${currency})`}</TableCell>
            <TableCell align="right">Market Cap Change 24h</TableCell>
          </TableRow>
        </TableHead>
      
          <TableBody>
            {data.map((coins) => {
                const {id, name, symbol, market_cap_change_percentage_24h, current_price, image, total_volume} = coins
                return <TableRow
               key={id}
               sx={{ '&:last-child td, &:last-child th': { border: 0 } }}
               >
                
                <TableCell  component="th" scope="row">
                  <Link className='link' to={`/${id}`}>
                  <div className='asset' >
                <Avatar
                alt=""
                src={image}
                >
                </Avatar>
                {symbol}
                </div>
                </Link>
                </TableCell>
                <TableCell align="right">{name}</TableCell>
                <TableCell align="right">{total_volume}</TableCell>
                <TableCell align="right">{current_price}</TableCell>
                <TableCell align="right">{market_cap_change_percentage_24h}</TableCell>
               </TableRow>
        })}
          </TableBody>  
        </Table>
        </TableContainer>
        <FormControl fullWidth>
     <InputLabel id="demo-simple-select-label">Coins per Page:</InputLabel>
         <Select
           labelId="demo-simple-select-label"
           id="demo-simple-select"
           label="Coins per Page:"
           value={perPage}
           onChange={e=> setPerPage(e.target.value)}
         >
           <MenuItem value={10}>10</MenuItem>
           <MenuItem value={20}>20</MenuItem>
           <MenuItem value={50}>50</MenuItem>
           <MenuItem value={100}>100</MenuItem>
         </Select>
         <Stack spacing={2}>
         <Pagination count={(dataList/perPage)} page={page} onChange={handleChange} size="large" />
          </Stack>
       </FormControl>
    </div>
  )
}

export default Coins